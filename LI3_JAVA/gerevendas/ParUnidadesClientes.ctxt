#BlueJ class context
comment0.params=
comment0.target=ParUnidadesClientes()
comment0.text=\n\ Construtor\ vazio\ \n
comment1.params=cli\ qua
comment1.target=ParUnidadesClientes(java.util.Set,\ int)
comment1.text=\n\ Construtor\ por\ par\u00E2metro\n
comment10.params=obj
comment10.target=boolean\ equals(java.lang.Object)
comment10.text=\n\ M\u00E9todo\ que\ testa\ a\ igualdade\ entre\ dois\ objetos.\n
comment11.params=
comment11.target=java.lang.String\ toString()
comment11.text=\n\ Representa\u00E7\u00E3o\ textual\ de\ ParUnidadesCliente.\n
comment2.params=p
comment2.target=ParUnidadesClientes(ParUnidadesClientes)
comment2.text=\n\ Construtor\ de\ c\u00F3pia\n
comment3.params=cli
comment3.target=void\ setClientes(java.util.Set)
comment3.text=\n\ Define\ o\ conjunto\ de\ clientes\ atrav\u00E9s\ do\ par\u00E2metro\ recebido\ pelo\ m\u00E9todo.\n
comment4.params=
comment4.target=java.util.Set\ getClientes()
comment4.text=\n\ M\u00E9todo\ que\ retorna\ o\ conjunto\ dos\ clientes.\n
comment5.params=
comment5.target=int\ getQuantos()
comment5.text=\n\ M\u00E9todo\ que\ retorna\ as\ quantidades.\n
comment6.params=s
comment6.target=void\ addCliente(java.lang.String)
comment6.text=\n\ M\u00E9todo\ que\ adiciona\ um\ cliente\ ao\ conjunto\ de\ clientes.\n
comment7.params=n
comment7.target=void\ addUnidade(int)
comment7.text=\n\ M\u00E9todo\ que\ adiciona\ uma\ quantidade\ \u00E0s\ quantidades\ da\ classe.\n
comment8.params=
comment8.target=int\ getNumClientes()
comment8.text=\n\ M\u00E9todo\ que\ devolve\ o\ n\u00FAmero\ de\ clientes.\n
comment9.params=
comment9.target=ParUnidadesClientes\ clone()
comment9.text=\n\ Devolve\ uma\ c\u00F3pia\ da\ inst\u00E2ncia.\n
numComments=12
