#BlueJ class context
comment0.params=
comment0.target=Faturacao()
comment0.text=\n\ Construtor\ Vazio\n
comment1.params=fat
comment1.target=Faturacao(Faturacao)
comment1.text=\n\ Construtor\ por\ c\u00F3pia\n
comment10.params=o
comment10.target=boolean\ equals(java.lang.Object)
comment10.text=\n\ Verifica\ a\ igualdade\ com\ outro\ objecto\n
comment11.params=
comment11.target=java.lang.String\ toString()
comment11.text=\n\ Devolve\ representa\u00E7\u00E3o\ textual\ da\ Fatura\u00E7\u00E3o\n
comment2.params=f
comment2.target=Faturacao(java.util.Map)
comment2.text=\n\ Construtor\ por\ par\u00E2metro\n
comment3.params=
comment3.target=java.util.Map\ getFaturacao()
comment3.text=\n\ Obter\ estrutura\ Map\ relativa\ \u00E0\ Fatura\u00E7\u00E3o.\n
comment4.params=
comment4.target=void\ limpaFaturacao()
comment4.text=\n\ M\u00E9todo\ que\ limpa\ a\ estrutura\ da\ fatura\u00E7\u00E3o\n
comment5.params=m
comment5.target=ProdutosFat\ getFaturacaoMes(int)
comment5.text=\n\ Obter\ valores\ (ProdutosFat)\ relativo\ a\ um\ m\u00EAs.\n
comment6.params=f
comment6.target=void\ setFaturacao(java.util.Map)
comment6.text=\n\ Definir\ a\ Fatura\u00E7\u00E3o.\n
comment7.params=v
comment7.target=void\ adicionaVendaFaturacao(Venda)
comment7.text=\n\ Adicionar\ uma\ nova\ venda\ \u00E0\ estrutura\ da\ Fatura\u00E7\u00E3o.\n\ Existem\ dois\ casos\ poss\u00EDveis\:\ ainda\ n\u00E3o\ h\u00E1\ nenhuma\ entrada\ com\ o\ m\u00EAs,\ por\ isso,\ pode-se\ assumir\ que\ todos\ os\ restantes\ maps\ t\u00EAm\ de\ ser\ criados\ de\ raiz\ \n\ ou\ j\u00E1\ h\u00E1\ uma\ entrada\ com\ o\ m\u00EAs,\ por\ isso\ temos\ de\ adicionar\ o\ resto\ a\ esta\ entrada\ existente.\n
comment8.params=
comment8.target=int\ hashCode()
comment8.text=\n\ Redefini\u00E7\u00E3o\ do\ hashCode.\n
comment9.params=
comment9.target=Faturacao\ clone()
comment9.text=\n\ Devolve\ uma\ c\u00F3pia\ da\ inst\u00E2ncia.\n
numComments=12
