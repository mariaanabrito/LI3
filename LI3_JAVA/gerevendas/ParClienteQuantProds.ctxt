#BlueJ class context
comment0.params=
comment0.target=ParClienteQuantProds()
comment0.text=\n\ Construtor\ vazio.\n
comment1.params=c\ s
comment1.target=ParClienteQuantProds(java.lang.String,\ java.util.Set)
comment1.text=\n\ Construtor\ por\ par\u00E2metro.\n
comment10.params=obj
comment10.target=boolean\ equals(java.lang.Object)
comment10.text=\n\ Testa\ a\ igualdade\ entre\ dois\ objetos.\n
comment11.params=
comment11.target=java.lang.String\ toString()
comment11.text=\n\ Representa\u00E7\u00E3o\ textual\ de\ ParClienteQuantProds\n
comment2.params=p
comment2.target=ParClienteQuantProds(ParClienteQuantProds)
comment2.text=\n\ Construtor\ de\ c\u00F3pia.\n
comment3.params=
comment3.target=java.lang.String\ getCliente()
comment3.text=\n\ M\u00E9todo\ que\ retorna\ o\ c\u00F3digo\ do\ cliente\n
comment4.params=s
comment4.target=void\ setProds(java.util.Set)
comment4.text=\n\ M\u00E9todo\ que\ define\ o\ conjunto\ dos\ produtos\ atrav\u00E9s\ do\ par\u00E2metro\ recebido\ pelo\ m\u00E9todo.\n
comment5.params=
comment5.target=java.util.Set\ getProds()
comment5.text=\n\ M\u00E9todo\ que\ retorna\ o\ conjuntos\ dos\ produtos.\n
comment6.params=s
comment6.target=void\ adicionaProduto(java.lang.String)
comment6.text=\n\ M\u00E9todo\ que\ adiciona\ um\ produto\ ao\ conjunto\ atrav\u00E9s\ do\ par\u00E2metro\ recebido\ pelo\ m\u00E9todo.\n
comment7.params=
comment7.target=int\ getProdsDistintos()
comment7.text=\n\ M\u00E9todo\ que\ devolve\ o\ n\u00FAmero\ de\ produtos\ distintos.\n
comment8.params=s
comment8.target=void\ setCliente(java.lang.String)
comment8.text=\n\ M\u00E9todo\ que\ define\ o\ o\ c\u00F3digo\ do\ cliente\ atrav\u00E9s\ do\ par\u00E2metro\ recebido\ pelo\ m\u00E9todo.\n
comment9.params=
comment9.target=ParClienteQuantProds\ clone()
comment9.text=\n\ Devolve\ uma\ c\u00F3pia\ da\ inst\u00E2ncia.\n
numComments=12
