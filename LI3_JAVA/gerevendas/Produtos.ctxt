#BlueJ class context
comment0.params=
comment0.target=Produtos()
comment0.text=\n\ Construtor\ Vazio.\n
comment1.params=ps
comment1.target=Produtos(Produtos)
comment1.text=\n\ Construtor\ por\ C\u00F3pia.\n
comment10.params=o
comment10.target=boolean\ equals(java.lang.Object)
comment10.text=\n\ Verifica\ a\ igualdade\ com\ outro\ objecto\n
comment11.params=
comment11.target=java.lang.String\ toString()
comment11.text=\n\ Devolve\ representa\u00E7\u00E3o\ textual\ dos\ produtos.\n
comment2.params=ps
comment2.target=Produtos(java.util.Map)
comment2.text=\n\ Construtor\ por\ Par\u00E2metro.\n
comment3.params=produto\ preco\ unid
comment3.target=Produtos(java.lang.String,\ double,\ int)
comment3.text=\ M\u00E9todo\ que\ adiciona\ um\ novo\ produto\ quando\ n\u00E3o\ existia\ nenhuma\ entrada\ com\ a\ filial\ no\ map\ anterior,\ \n\ por\ isso\ para\ essa\ nova\ entrada\ temos\ de\ criar\ um\ novo\ map\ de\ produtos\ \n
comment4.params=
comment4.target=java.util.Map\ getProdutos()
comment4.text=\n\ Devolve\ mapeamento\ dos\ produtos.\n
comment5.params=cod
comment5.target=ComponentesProduto\ getComponentesCodigo(java.lang.String)
comment5.text=\n\ Devolve\ os\ ComponentesProduto\ relativo\ a\ um\ c\u00F3digo\ de\ produto.\n
comment6.params=ps
comment6.target=void\ setProdutos(java.util.Map)
comment6.text=\n\ Define\ mapeamentro\ entre\ produtos\ e\ seus\ atributos.\n
comment7.params=produto\ preco\ quantos
comment7.target=void\ adicionaProduto(java.lang.String,\ double,\ int)
comment7.text=\n\ M\u00E9todo\ que\ adiciona\ ou\ atualiza\ um\ produto.\n\ Existem\ dois\ casos\ poss\u00EDveis\:\ o\ produto\ n\u00E3o\ existe,\ por\ isso\ temos\ de\ \n\ adicion\u00E1-lo\ ou\ existe\ e\ temos\ de\ atualizar\ os\ valores.\n
comment8.params=
comment8.target=int\ hashCode()
comment8.text=\n\ Redefini\u00E7\u00E3o\ do\ hashCode.\n
comment9.params=
comment9.target=Produtos\ clone()
comment9.text=\n\ Devolver\ uma\ c\u00F3pia\ da\ inst\u00E2ncia\n
numComments=12
